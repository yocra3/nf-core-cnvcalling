#!/usr/bin/env nextflow
/*
========================================================================================
                         nf-core/cnvcalling
========================================================================================
 nf-core/cnvcalling Analysis Pipeline.
 #### Homepage / Documentation
 https://github.com/nf-core/cnvcalling
----------------------------------------------------------------------------------------
*/

nextflow.enable.dsl = 2

def helpMessage() {
    // TODO nf-core: Add to this help message with new command line parameters
    log.info nfcoreHeader()
    log.info"""

    Usage:

    The typical command for running the pipeline is as follows:

    nextflow run nf-core/cnvcalling --reads '*_R{1,2}.fastq.gz' -profile docker

    Mandatory arguments:
      --reads [file]                Path to input data (must be surrounded with quotes)
      -profile [str]                Configuration profile to use. Can use multiple (comma separated)
                                    Available: conda, docker, singularity, test, awsbatch, <institute> and more

    Options:
      --genome [str]                  Name of iGenomes reference
      --single_end [bool]             Specifies that the input is single-end reads

    References                        If not specified in the configuration file or you wish to overwrite any of the references
      --fasta [file]                  Path to fasta reference

    Other options:
      --outdir [file]                 The output directory where the results will be saved
      --email [email]                 Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail [email]         Same as --email, except only send mail if the workflow is not successful
      --max_multiqc_email_size [str]  Theshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name [str]                     Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic

    AWSBatch options:
      --awsqueue [str]                The AWSBatch JobQueue that needs to be set when running on AWSBatch
      --awsregion [str]               The AWS Region for your AWS Batch job to run on
      --awscli [str]                  Path to the AWS CLI tool
    """.stripIndent()
}

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

/*
 * SET UP CONFIGURATION VARIABLES
 */

// Has the run name been specified by the user?
//  this has the bonus effect of catching both -name and --name
custom_runName = params.name
if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {
    custom_runName = workflow.runName
}

if (workflow.profile.contains('awsbatch')) {
    // AWSBatch sanity checking
    if (!params.awsqueue || !params.awsregion) exit 1, "Specify correct --awsqueue and --awsregion parameters on AWSBatch!"
    // Check outdir paths to be S3 buckets if running on AWSBatch
    // related: https://github.com/nextflow-io/nextflow/issues/813
    if (!params.outdir.startsWith('s3:')) exit 1, "Outdir not on S3 - specify S3 Bucket to run on AWSBatch!"
    // Prevent trace files to be stored on S3 since S3 does not support rolling files.
    if (params.tracedir.startsWith('s3:')) exit 1, "Specify a local tracedir or run without trace! S3 cannot be used for tracefiles."
}

// Stage config files
ch_output_docs = file("$baseDir/docs/output.md", checkIfExists: true)

/*
 * Create a channel for input read files
 */

if (params.inputTable) {
      Channel
            .fromPath(params.inputTable)
            .splitCsv(sep: "\t")
            .map { row -> [ row[0], file(row[1], checkIfExists: true), file(row[1] + ".bai", checkIfExists: true) ,
             file(row[2], checkIfExists: true),  file(row[2] + ".tbi", checkIfExists: true) ] }
            .ifEmpty { exit 1, "params.inputTable was empty - no input files supplied" }
            .set { ch_input }

            Channel
              .fromPath(params.inputTable)
              .splitCsv(sep: "\t")
              .map { row -> [ row[0], row[3] ]}
              .set { ch_sex }

} else { exit 1, "--inputTable should be text file with the sample id, a bam file and a vcf file should be provided." }


if (params.fasta && !params.skipAlignment) {
  if (hasExtension(params.fasta, 'gz')) {
    Channel.fromPath(params.fasta, checkIfExists: true)
        .ifEmpty { exit 1, "Genome fasta file not found: ${params.fasta}" }
        .set { genome_fasta_gz }
  } else {
      Channel.fromPath(params.fasta, checkIfExists: true)
        .ifEmpty { exit 1, "Genome fasta file not found: ${params.fasta}" }
        .set { ch_fasta }
  }
}




/*
* Initialize parameters
*/
date = java.time.LocalDate.now()
params.gapsRef = "/home/SHARED/DATA/REFERENCES/GRCh37/Repeats/RLCRs_no_Repeat_Masker.txt"
gapsRef = file("${params.gapsRef}")
params.binSize = 100
params.genome = "hg19"
commonCNV = file("${params.commonCNV}")
clinvarCNV = file("${params.clinvarCNV}")
gtfRef = file("${params.gtfRef}")
omim = file("${params.omim}")
omim_map = file("${params.omim_map}")
mosaichunter_config = file("${params.mosaichunter_config}")
annovar = file("${params.annovarPath}/table_annovar.pl")
annovarVar = file("${params.annovarPath}/annotate_variation.pl")
annovarCod = file("${params.annovarPath}/coding_change.pl")
annovarXref = file("${params.annovarPath}/example/gene_fullxref.txt")
annovarFold = file("${params.annovarFold}")

//
// // Header log info
// log.info nfcoreHeader()
// def summary = [:]
// if (workflow.revision) summary['Pipeline Release'] = workflow.revision
// summary['Run Name']         = custom_runName ?: workflow.runName
// // TODO nf-core: Report custom parameters here
// summary['Reads']            = params.reads
// summary['Fasta Ref']        = params.fasta
// summary['Data Type']        = params.single_end ? 'Single-End' : 'Paired-End'
// summary['Max Resources']    = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
// if (workflow.containerEngine) summary['Container'] = "$workflow.containerEngine - $workflow.container"
// summary['Output dir']       = params.outdir
// summary['Launch dir']       = workflow.launchDir
// summary['Working dir']      = workflow.workDir
// summary['Script dir']       = workflow.projectDir
// summary['User']             = workflow.userName
// if (workflow.profile.contains('awsbatch')) {
//     summary['AWS Region']   = params.awsregion
//     summary['AWS Queue']    = params.awsqueue
//     summary['AWS CLI']      = params.awscli
// }
// summary['Config Profile'] = workflow.profile
// if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
// if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
// if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
// if (params.email || params.email_on_fail) {
//     summary['E-mail Address']    = params.email
//     summary['E-mail on failure'] = params.email_on_fail
//     summary['MultiQC maxsize']   = params.max_multiqc_email_size
// }
// log.info summary.collect { k,v -> "${k.padRight(18)}: $v" }.join("\n")
// log.info "-\033[2m--------------------------------------------------\033[0m-"
//
// // Check the hostnames against configured profiles
// checkHostname()
//
// Channel.from(summary.collect{ [it.key, it.value] })
//     .map { k,v -> "<dt>$k</dt><dd><samp>${v ?: '<span style=\"color:#999999;\">N/A</a>'}</samp></dd>" }
//     .reduce { a, b -> return [a, b].join("\n            ") }
//     .map { x -> """
//     id: 'nf-core-cnvcalling-summary'
//     description: " - this information is collected when the pipeline is started."
//     section_name: 'nf-core/cnvcalling Workflow Summary'
//     section_href: 'https://github.com/nf-core/cnvcalling'
//     plot_type: 'html'
//     data: |
//         <dl class=\"dl-horizontal\">
//             $x
//         </dl>
//     """.stripIndent() }
//     .set { ch_workflow_summary }
//
compressedReference = hasExtension(params.fasta, 'gz')


//
//
// /*
//  * Parse software version numbers
//  */
// process get_software_versions {
//     publishDir "${params.outdir}/pipeline_info", mode: 'copy',
//         saveAs: { filename ->
//                       if (filename.indexOf(".csv") > 0) filename
//                       else null
//                 }
//
//     output:
//     file 'software_versions_mqc.yaml' into ch_software_versions_yaml
//     file "software_versions.csv"
//
//     script:
//     // TODO nf-core: Get all tools to print their version number here
//     """
//     echo $workflow.manifest.version > v_pipeline.txt
//     echo $workflow.nextflow.version > v_nextflow.txt
//     fastqc --version > v_fastqc.txt
//     multiqc --version > v_multiqc.txt
//     scrape_software_versions.py &> software_versions_mqc.yaml
//     """
// }
//

include { GUNZIP_GENOME_FASTA } from './modules/local/process/gunzip_genome_fasta.nf'
include { CREATE_FASTA_INDEX } from './modules/local/process/create_FASTA_index.nf'
include { CREATE_FASTA_DICT } from './modules/local/process/create_FASTA_dict.nf'
include { SPLIT_FASTA } from './modules/local/process/split_FASTA.nf'
include { RUN_CNVNATOR } from './modules/local/process/run_CNVNator.nf'
include { FORMAT_CNVNATOR } from './modules/local/process/format_CNVNator.nf'
include { CLUSTER_CNVNATOR } from './modules/local/process/cluster_CNVNator.nf'
include { RUN_ERDS } from './modules/local/process/run_ERDS.nf'
include { FORMAT_ERDS } from './modules/local/process/format_ERDS.nf'
include { CLUSTER_ERDS } from './modules/local/process/cluster_ERDS.nf'
include { COMBINE_CNV_CALLS } from './modules/local/process/combine_cnv_calls.nf'
include { FILTER_CNV_CALLS } from './modules/local/process/filter_cnv_calls.nf'
include { CONVERT_TCAGCNV_VCF } from './modules/local/process/convert_TCAGcnv_VCF.nf'
include { BCFTOOLS_REHEADER_FASTA } from './modules/local/process/bcftools_reheader_fasta.nf'
include { BCFTOOLS_SORT_COMPRESS } from './modules/local/process/bcftools_sort_compress.nf'
include { TABIX_INDEX_VCF } from './modules/local/process/tabix_index_vcf.nf'
include { ANNOTATE_CNV_VCF } from './modules/local/process/annotate_CNV_VCF.nf'
include { BGZIP_COMPRESS_VCF } from './modules/local/process/bgzip_compress_vcf.nf'
include { PRIORITIZE_CNVS } from './modules/local/process/prioritize_CNVs.nf'
include { BCFTOOLS_SELECT_INDELS } from './modules/local/process/bcftools_select_indels.nf'
include { VCF_INDELS_TO_BED } from './modules/local/process/VCF_indels_to_bed.nf'
include { TCAG_CNVS_TO_BED } from './modules/local/process/TCAG_CNVs_to_bed.nf'
include { MERGE_BED } from './modules/local/process/merge_bed.nf'
include { RUN_MOSAICHUNTER } from './modules/local/process/run_MosaicHunter.nf'
include { CONVERT_MOSAICHUNTER_VCF } from './modules/local/process/convert_MosaicHunter_VCF.nf'
include { BCFTOOLS_MERGE_VCFS } from './modules/local/process/bcftools_merge_vcfs.nf'
include { SELECT_NONPRIVATE_VARIANTS } from './modules/local/process/select_nonprivate_variants.nf'
include { CONVERT_MOSAICHUNTER_ANNOVAR } from './modules/local/process/convert_MosaicHunter_Annovar.nf'
include { ANNOTATE_SNVS_ANNOVAR } from './modules/local/process/annotate_SNVs_Annovar.nf'
include { PRIORITIZE_SNVS } from './modules/local/process/prioritize_SNVs.nf'


workflow PREPROCESS {

  take:
  ch_fasta

  main:
  CREATE_FASTA_INDEX(ch_fasta)
  CREATE_FASTA_DICT(CREATE_FASTA_INDEX.out)
  SPLIT_FASTA(ch_fasta)

  emit:
  idx = CREATE_FASTA_INDEX.out
  dict = CREATE_FASTA_DICT.out
  split = SPLIT_FASTA.out
}

workflow CNVNATOR {

  take:
  ch_input
  fasta
  genome
  binSize
  gapsRef

  main:
  RUN_CNVNATOR(ch_input, fasta, genome, binSize)
  FORMAT_CNVNATOR(RUN_CNVNATOR.out)
  CLUSTER_CNVNATOR(FORMAT_CNVNATOR.out, gapsRef)

  emit:
  CLUSTER_CNVNATOR.out
}

workflow ERDS {

  take:
  ch_input
  fasta
  gapsRef

  main:
  RUN_ERDS(ch_input, fasta)
  FORMAT_ERDS(RUN_ERDS.out)
  CLUSTER_ERDS(FORMAT_ERDS.out, gapsRef)

  emit:
  CLUSTER_ERDS.out
}

workflow FILTER_CNVS {

  take:
  ch_input
  gapsRef
  fasta

  main:
  FILTER_CNV_CALLS(ch_input, gapsRef)
  CONVERT_TCAGCNV_VCF(FILTER_CNV_CALLS.out.txt)
  BCFTOOLS_REHEADER_FASTA(CONVERT_TCAGCNV_VCF.out, fasta)
  BCFTOOLS_SORT_COMPRESS(BCFTOOLS_REHEADER_FASTA.out)
  TABIX_INDEX_VCF(BCFTOOLS_SORT_COMPRESS.out)

  emit:
  txt = FILTER_CNV_CALLS.out.txt
  vcf = TABIX_INDEX_VCF.out
}

workflow ANNOTATE_CNVS {

    take:
    vcf
    commonCNV
    clinvarCNV
    gtfRef
    omim

    main:
    ANNOTATE_CNV_VCF(vcf, commonCNV, clinvarCNV, gtfRef, omim)
    BGZIP_COMPRESS_VCF(ANNOTATE_CNV_VCF.out)
    TABIX_INDEX_VCF(BGZIP_COMPRESS_VCF.out)
    PRIORITIZE_CNVS(TABIX_INDEX_VCF.out)

    emit:
    PRIORITIZE_CNVS.out

}


workflow MOSAICHUNTER {

  take:
  ch_input
  cnvs
  ch_sex
  fasta
  mosaichunter_config
  mosaichunter_mode
  gapsRef

  main:
  BCFTOOLS_SELECT_INDELS(ch_input)
  VCF_INDELS_TO_BED(BCFTOOLS_SELECT_INDELS.out)
  TCAG_CNVS_TO_BED(cnvs)

  ch_comb = VCF_INDELS_TO_BED.out.join(TCAG_CNVS_TO_BED.out)
  MERGE_BED(ch_comb)
  ch_mosaichunter_input = ch_input.join(ch_sex).join(MERGE_BED.out)

  // MosaicHunter
  RUN_MOSAICHUNTER(ch_mosaichunter_input, fasta, mosaichunter_config, mosaichunter_mode, gapsRef)
  CONVERT_MOSAICHUNTER_VCF(RUN_MOSAICHUNTER.out.tsv)
  BGZIP_COMPRESS_VCF(CONVERT_MOSAICHUNTER_VCF.out)
  TABIX_INDEX_VCF(BGZIP_COMPRESS_VCF.out)

  emit:
  txt = RUN_MOSAICHUNTER.out.tsv
  vcf = TABIX_INDEX_VCF.out
}

workflow FILTER_MOSAIC_SNVS {

  take:
  vcf
  mosaic_res
  annovar
  annovarVar
  annovarCod
  annovarXref
  annovarFold
  omim
  omim_map

  main:
  BCFTOOLS_MERGE_VCFS(vcf)
  SELECT_NONPRIVATE_VARIANTS(BCFTOOLS_MERGE_VCFS.out)

  CONVERT_MOSAICHUNTER_ANNOVAR(mosaic_res)
  ANNOTATE_SNVS_ANNOVAR(CONVERT_MOSAICHUNTER_ANNOVAR.out, annovar, annovarVar, annovarCod, annovarXref, annovarFold)
  PRIORITIZE_SNVS(ANNOTATE_SNVS_ANNOVAR.out, omim, omim_map, SELECT_NONPRIVATE_VARIANTS.out)

}


workflow  {

  if (compressedReference) {
    GUNZIP_GENOME_FASTA(genome_fasta_gz)
    ch_fasta = GUNZIP_GENOME_FASTA.out
  }

  PREPROCESS(ch_fasta)

  // Run CNVnator and ERDS
  CNVNATOR(ch_input, PREPROCESS.out.split.collect(), params.genome, params.binSize, gapsRef)
  ERDS(ch_input, PREPROCESS.out.dict.collect(), gapsRef)

  // Combine calls
  ch_combined_calls = CNVNATOR.out.join(ERDS.out)
  COMBINE_CNV_CALLS(ch_combined_calls)

  // Filter and prioritize CNVs
  ch_final_calls_sex = COMBINE_CNV_CALLS.out.join(ch_sex)
  FILTER_CNVS(ch_final_calls_sex, gapsRef, PREPROCESS.out.idx.collect())
  ANNOTATE_CNVS(FILTER_CNVS.out.vcf, commonCNV, clinvarCNV, gtfRef, omim)


  // MosaicHunter
  MOSAICHUNTER(ch_input, FILTER_CNVS.out.txt, ch_sex, ch_fasta.collect(), mosaichunter_config, params.mosaichunter_mode, gapsRef)
  FILTER_MOSAIC_SNVS(MOSAICHUNTER.out.vcf.collect().filter( File ), MOSAICHUNTER.out.txt, annovar, annovarVar, annovarCod, annovarXref, annovarFold, omim, omim_map)

}



/* NOTE: The publishDir for the following process should be included in a subworkflow
process ANNOTATE_CNV_VCF {

  tag "$sampID"
  //publishDir "${params.outdir}/CNVs/VCF/", mode: 'copy'

  input:
  set sampID, file(vcf), file(vcftbi) from sortVCF
  file(commonCNV)
  file(clinvarCNV)
  file(gtfRef)
  file(omim)

  output:
  set sampID, file("${sampID}.ERDS_CNVnator_CNVs.annotated.vcf.gz"), file("${sampID}.ERDS_CNVnator_CNVs.annotated.vcf.gz.tbi")  into annotatedVCF

  """
  annotateCNVs.R $vcf $commonCNV $clinvarCNV $gtfRef $omim ${sampID}.ERDS_CNVnator_CNVs.annotated.vcf
  bgzip ${sampID}.ERDS_CNVnator_CNVs.annotated.vcf
  tabix -p vcf ${sampID}.ERDS_CNVnator_CNVs.annotated.vcf.gz
  """

}

process CONVERT_MOSAICHUNTER_VCF {

  tag "$sampID"

  publishDir "${params.outdir}/Mosaics/SNVs/VCF/",  mode: 'copy'


  input:
  tuple sampID, file(tsv) from ch_mosaichunter_out2

  output:
  tuple sampID, file("${sampID}.MosaicHunter.MosaicSNVs.vcf.gz") into ch_mosaichunter_vcf

  script:
  """
  ## Make Header
echo "##fileformat=VCFv4.3
##fileDate=$date
##source=MosaicHunter
##FORMAT=<ID=GT,Number=1,Type=String,Description='Genotype'>
##FORMAT=<ID=AF,Number=1,Type=Float,Description='Frequency of alternate allele'>
##FORMAT=<ID=DP,Number=1,Type=Float,Description='Read depth'>
##FORMAT=<ID=AD,Number=.,Type=Integer,Description='Allelic depths for the ref and alt alleles in the order listed.'>
#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\t$sampID" > ${sampID}.MosaicHunter.MosaicSNVs.vcf

## Add calls
awk  '{OFS = "\t"}
{if (\$3=\$7)
      print \$1, \$2, ".", \$3, \$9, ".", "PASS", ".", "GT:AF:DP:AD", "0/1:"\$10/\$4":"\$4":"\$8","\$10;
else
    print \$1, \$2, ".", \$3, \$7, ".", "PASS", ".", "GT:AF:DP:AD", "0/1:"\$8/\$4":"\$4":"\$10","\$8;
   }'    $tsv >> ${sampID}.MosaicHunter.MosaicSNVs.vcf
   sed -i 's/:-/:\\./g' ${sampID}.MosaicHunter.MosaicSNVs.vcf ## Change empty values to .
   sed -i 's/\\x27/\\x22/g' ${sampID}.MosaicHunter.MosaicSNVs.vcf ## Change ' for "
   bgzip ${sampID}.MosaicHunter.MosaicSNVs.vcf
  """
}

*/

// /*
//  * STEP 3 - Output Description HTML
//  */
// process output_documentation {
//
//     publishDir "${params.outdir}/pipeline_info", mode: 'copy'
//
//     input:
//     file output_docs from ch_output_docs
//
//     output:
//     file "results_description.html"
//
//     script:
//     """
//     markdown_to_html.py $output_docs -o results_description.html
//     """
// }
//
// /*
//  * Completion e-mail notification
//  */
// workflow.onComplete {
//
//     // Set up the e-mail variables
//     def subject = "[nf-core/cnvcalling] Successful: $workflow.runName"
//     if (!workflow.success) {
//         subject = "[nf-core/cnvcalling] FAILED: $workflow.runName"
//     }
//     def email_fields = [:]
//     email_fields['version'] = workflow.manifest.version
//     email_fields['runName'] = custom_runName ?: workflow.runName
//     email_fields['success'] = workflow.success
//     email_fields['dateComplete'] = workflow.complete
//     email_fields['duration'] = workflow.duration
//     email_fields['exitStatus'] = workflow.exitStatus
//     email_fields['errorMessage'] = (workflow.errorMessage ?: 'None')
//     email_fields['errorReport'] = (workflow.errorReport ?: 'None')
//     email_fields['commandLine'] = workflow.commandLine
//     email_fields['projectDir'] = workflow.projectDir
//     email_fields['summary'] = summary
//     email_fields['summary']['Date Started'] = workflow.start
//     email_fields['summary']['Date Completed'] = workflow.complete
//     email_fields['summary']['Pipeline script file path'] = workflow.scriptFile
//     email_fields['summary']['Pipeline script hash ID'] = workflow.scriptId
//     if (workflow.repository) email_fields['summary']['Pipeline repository Git URL'] = workflow.repository
//     if (workflow.commitId) email_fields['summary']['Pipeline repository Git Commit'] = workflow.commitId
//     if (workflow.revision) email_fields['summary']['Pipeline Git branch/tag'] = workflow.revision
//     email_fields['summary']['Nextflow Version'] = workflow.nextflow.version
//     email_fields['summary']['Nextflow Build'] = workflow.nextflow.build
//     email_fields['summary']['Nextflow Compile Timestamp'] = workflow.nextflow.timestamp
//
//     // TODO nf-core: If not using MultiQC, strip out this code (including params.max_multiqc_email_size)
//     // On success try attach the multiqc report
//     def mqc_report = null
//     try {
//         if (workflow.success) {
//             mqc_report = ch_multiqc_report.getVal()
//             if (mqc_report.getClass() == ArrayList) {
//                 log.warn "[nf-core/cnvcalling] Found multiple reports from process 'multiqc', will use only one"
//                 mqc_report = mqc_report[0]
//             }
//         }
//     } catch (all) {
//         log.warn "[nf-core/cnvcalling] Could not attach MultiQC report to summary email"
//     }
//
//     // Check if we are only sending emails on failure
//     email_address = params.email
//     if (!params.email && params.email_on_fail && !workflow.success) {
//         email_address = params.email_on_fail
//     }
//
//     // Render the TXT template
//     def engine = new groovy.text.GStringTemplateEngine()
//     def tf = new File("$baseDir/assets/email_template.txt")
//     def txt_template = engine.createTemplate(tf).make(email_fields)
//     def email_txt = txt_template.toString()
//
//     // Render the HTML template
//     def hf = new File("$baseDir/assets/email_template.html")
//     def html_template = engine.createTemplate(hf).make(email_fields)
//     def email_html = html_template.toString()
//
//     // Render the sendmail template
//     def smail_fields = [ email: email_address, subject: subject, email_txt: email_txt, email_html: email_html, baseDir: "$baseDir", mqcFile: mqc_report, mqcMaxSize: params.max_multiqc_email_size.toBytes() ]
//     def sf = new File("$baseDir/assets/sendmail_template.txt")
//     def sendmail_template = engine.createTemplate(sf).make(smail_fields)
//     def sendmail_html = sendmail_template.toString()
//
//     // Send the HTML e-mail
//     if (email_address) {
//         try {
//             if (params.plaintext_email) { throw GroovyException('Send plaintext e-mail, not HTML') }
//             // Try to send HTML e-mail using sendmail
//             [ 'sendmail', '-t' ].execute() << sendmail_html
//             log.info "[nf-core/cnvcalling] Sent summary e-mail to $email_address (sendmail)"
//         } catch (all) {
//             // Catch failures and try with plaintext
//             [ 'mail', '-s', subject, email_address ].execute() << email_txt
//             log.info "[nf-core/cnvcalling] Sent summary e-mail to $email_address (mail)"
//         }
//     }
//
//     // Write summary e-mail HTML to a file
//     def output_d = new File("${params.outdir}/pipeline_info/")
//     if (!output_d.exists()) {
//         output_d.mkdirs()
//     }
//     def output_hf = new File(output_d, "pipeline_report.html")
//     output_hf.withWriter { w -> w << email_html }
//     def output_tf = new File(output_d, "pipeline_report.txt")
//     output_tf.withWriter { w -> w << email_txt }
//
//     c_green = params.monochrome_logs ? '' : "\033[0;32m";
//     c_purple = params.monochrome_logs ? '' : "\033[0;35m";
//     c_red = params.monochrome_logs ? '' : "\033[0;31m";
//     c_reset = params.monochrome_logs ? '' : "\033[0m";
//
//     if (workflow.stats.ignoredCount > 0 && workflow.success) {
//         log.info "-${c_purple}Warning, pipeline completed, but with errored process(es) ${c_reset}-"
//         log.info "-${c_red}Number of ignored errored process(es) : ${workflow.stats.ignoredCount} ${c_reset}-"
//         log.info "-${c_green}Number of successfully ran process(es) : ${workflow.stats.succeedCount} ${c_reset}-"
//     }
//
//     if (workflow.success) {
//         log.info "-${c_purple}[nf-core/cnvcalling]${c_green} Pipeline completed successfully${c_reset}-"
//     } else {
//         checkHostname()
//         log.info "-${c_purple}[nf-core/cnvcalling]${c_red} Pipeline completed with errors${c_reset}-"
//     }
//
// }
//
//
// def nfcoreHeader() {
//     // Log colors ANSI codes
//     c_black = params.monochrome_logs ? '' : "\033[0;30m";
//     c_blue = params.monochrome_logs ? '' : "\033[0;34m";
//     c_cyan = params.monochrome_logs ? '' : "\033[0;36m";
//     c_dim = params.monochrome_logs ? '' : "\033[2m";
//     c_green = params.monochrome_logs ? '' : "\033[0;32m";
//     c_purple = params.monochrome_logs ? '' : "\033[0;35m";
//     c_reset = params.monochrome_logs ? '' : "\033[0m";
//     c_white = params.monochrome_logs ? '' : "\033[0;37m";
//     c_yellow = params.monochrome_logs ? '' : "\033[0;33m";
//
//     return """    -${c_dim}--------------------------------------------------${c_reset}-
//                                             ${c_green},--.${c_black}/${c_green},-.${c_reset}
//     ${c_blue}        ___     __   __   __   ___     ${c_green}/,-._.--~\'${c_reset}
//     ${c_blue}  |\\ | |__  __ /  ` /  \\ |__) |__         ${c_yellow}}  {${c_reset}
//     ${c_blue}  | \\| |       \\__, \\__/ |  \\ |___     ${c_green}\\`-._,-`-,${c_reset}
//                                             ${c_green}`._,._,\'${c_reset}
//     ${c_purple}  nf-core/cnvcalling v${workflow.manifest.version}${c_reset}
//     -${c_dim}--------------------------------------------------${c_reset}-
//     """.stripIndent()
// }
//
// def checkHostname() {
//     def c_reset = params.monochrome_logs ? '' : "\033[0m"
//     def c_white = params.monochrome_logs ? '' : "\033[0;37m"
//     def c_red = params.monochrome_logs ? '' : "\033[1;91m"
//     def c_yellow_bold = params.monochrome_logs ? '' : "\033[1;93m"
//     if (params.hostnames) {
//         def hostname = "hostname".execute().text.trim()
//         params.hostnames.each { prof, hnames ->
//             hnames.each { hname ->
//                 if (hostname.contains(hname) && !workflow.profile.contains(prof)) {
//                     log.error "====================================================\n" +
//                             "  ${c_red}WARNING!${c_reset} You are running with `-profile $workflow.profile`\n" +
//                             "  but your machine hostname is ${c_white}'$hostname'${c_reset}\n" +
//                             "  ${c_yellow_bold}It's highly recommended that you use `-profile $prof${c_reset}`\n" +
//                             "============================================================"
//                 }
//             }
//         }
//     }
// }
//
// Check file extension
def hasExtension(it, extension) {
    it.toString().toLowerCase().endsWith(extension.toLowerCase())
}
